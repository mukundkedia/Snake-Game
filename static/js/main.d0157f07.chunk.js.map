{"version":3,"sources":["components/Snake.js","components/Food.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","className","key","Food","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","score","alert","onClick","upHandler","bind","downHandler","leftHandler","rightHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0157f07.chunk.js","sourcesContent":["import React from 'react'\nimport './Snake.css'\n\nconst Snake = (props)=>{\n    return(\n        <div>\n            {props.snakeDots.map((dot,i)=>{\n                const style = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`\n                  }\n                return(\n                    <div className=\"snake-dot\" key ={i} \n                    style ={style}></div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Snake\n\n","import React from 'react'\nimport './Food.css'\n\nconst Food=(props)=>{\n    \n    const style = {\n        left : `${props.dot[0]}%`,\n        top : `${props.dot[1]}%`\n    }\n    return(\n            <div className=\"snake-food\" style={style}></div>\n    )\n    \n}\n\n\nexport default Food\n","import React, { Component } from 'react';\n\nimport Snake from './components/Snake'\nimport Food from './components/Food'\n\n\nimport './App.css';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ]\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (event) => {\n    \n    switch (event.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 50\n      })\n    }\n  }\n\n  onGameOver() {\n    const score = this.state.snakeDots.length-2;\n    alert(`Game Over. Your Score is ${score}`);\n    this.setState(initialState)\n  }\n\n  rightHandler(){\n    this.setState({\n      direction:'RIGHT'\n    })\n  }\n\n  upHandler(){\n    this.setState({\n      direction:'UP'\n    })\n  }\n\n  downHandler(){\n    this.setState({\n      direction:'DOWN'\n    })\n  }\n\n  leftHandler(){\n    this.setState({\n      direction:'LEFT'\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <header>SNAKE GAME</header>\n      <div className=\"game-area\">\n        \n        <Snake snakeDots={this.state.snakeDots}/>\n        <Food dot={this.state.food}/>\n      </div>\n      <div className=\"buttons\">\n      <button onClick={this.upHandler.bind(this)} className=\"up\">UP</button>\n      <button onClick={this.downHandler.bind(this)} className=\"down\">DOWN</button>\n      <button onClick={this.leftHandler.bind(this)} className=\"left\">LEFT</button>\n      <button onClick={this.rightHandler.bind(this)} className=\"right\">RIGHT</button>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}